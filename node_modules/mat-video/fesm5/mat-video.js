import { __values, __extends } from 'tslib';
import { Injectable, Component, ElementRef, Input, Renderer2, ViewChild, Directive, Host, ChangeDetectorRef, ChangeDetectionStrategy, Optional, Attribute, Pipe, EventEmitter, HostListener, Output, NgModule } from '@angular/core';
import { MatSlider, MAT_SLIDER_VALUE_ACCESSOR, MatButtonModule, MatIconModule, MatSliderModule } from '@angular/material';
import { FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var EventService = /** @class */ (function () {
    function EventService() {
    }
    /**
     * @param {?} renderer
     * @param {?} events
     * @return {?}
     */
    EventService.prototype.addEvents = /**
     * @param {?} renderer
     * @param {?} events
     * @return {?}
     */
    function (renderer, events) {
        var e_1, _a;
        var _loop_1 = function (event_1) {
            event_1.dispose = renderer.listen(event_1.element, event_1.name, function (newEvent) { return event_1.callback(newEvent); });
        };
        try {
            for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                var event_1 = events_1_1.value;
                _loop_1(event_1);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} events
     * @return {?}
     */
    EventService.prototype.removeEvents = /**
     * @param {?} events
     * @return {?}
     */
    function (events) {
        var e_2, _a;
        try {
            for (var events_2 = __values(events), events_2_1 = events_2.next(); !events_2_1.done; events_2_1 = events_2.next()) {
                var event_2 = events_2_1.value;
                if (event_2.dispose)
                    event_2.dispose();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (events_2_1 && !events_2_1.done && (_a = events_2.return)) _a.call(events_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    EventService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EventService.ctorParameters = function () { return []; };
    return EventService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVideoComponent = /** @class */ (function () {
    function MatVideoComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.src = null;
        this.title = null;
        this.autoplay = false;
        this.preload = true;
        this.loop = false;
        this.quality = true;
        this.fullscreen = true;
        this.download = false;
        this.color = 'primary';
        this.spinner = 'spin';
        this.poster = null;
        this.keyboard = true;
        this.overlay = null;
        this.playing = false;
        this.isFullscreen = false;
        this.videoLoaded = false;
        this.isMouseMoving = false;
        this.isMouseMovingTimeout = 2000;
    }
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video.nativeElement, name: 'loadstart', callback: function (event) { return _this.videoLoaded = false; }, dispose: null },
            { element: this.video.nativeElement, name: 'loadedmetadata', callback: function (event) { return _this.evLoadedMetadata(event); }, dispose: null },
            { element: this.video.nativeElement, name: 'error', callback: function (event) { return console.error('Unhandled Video Error', event); }, dispose: null },
            { element: this.video.nativeElement, name: 'contextmenu', callback: function (event) { return event.preventDefault(); }, dispose: null },
            { element: this.player.nativeElement, name: 'mousemove', callback: function (event) { return _this.evMouseMove(event); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        if (this.video && this.video.nativeElement)
            this.video.nativeElement.load();
    };
    /**
     * @return {?}
     */
    MatVideoComponent.prototype.getVideoTag = /**
     * @return {?}
     */
    function () {
        return this.video && this.video.nativeElement ? (/** @type {?} */ (this.video.nativeElement)) : null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVideoComponent.prototype.evLoadedMetadata = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.videoWidth = this.video.nativeElement.videoWidth;
        this.videoHeight = this.video.nativeElement.videoHeight;
        this.videoLoaded = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVideoComponent.prototype.evMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.isMouseMoving = true;
        clearTimeout(this.isMouseMovingTimer);
        this.isMouseMovingTimer = setTimeout(function () {
            _this.isMouseMoving = false;
        }, this.isMouseMovingTimeout);
    };
    /**
     * @param {?} activeClass
     * @param {?} inactiveClass
     * @return {?}
     */
    MatVideoComponent.prototype.getOverlayClass = /**
     * @param {?} activeClass
     * @param {?} inactiveClass
     * @return {?}
     */
    function (activeClass, inactiveClass) {
        if (this.overlay === null) {
            return (!this.playing || this.isMouseMoving) ? activeClass : inactiveClass;
        }
        else {
            return this.overlay ? activeClass : inactiveClass;
        }
    };
    MatVideoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-video',
                    template: "<div #player class=\"videoplayer\" [ngClass]=\"getOverlayClass('show-mouse', 'hide-mouse')\">\r\n    <div class=\"header\" *ngIf=\"title\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\r\n        {{title}}\r\n    </div>\r\n\r\n    <video #video class=\"video\" [attr.src]=\"src ? src : null\" [attr.autoplay]=\"autoplay ? true : null\" [preload]=\"preload ? 'auto' : 'metadata'\"\r\n        [attr.poster]=\"poster ? poster : null\" [attr.loop]=\"loop ? loop : null\">\r\n        <ng-content select=\"source\"></ng-content>\r\n        <ng-content select=\"track\"></ng-content>\r\n        This browser does not support HTML5 video.\r\n    </video>\r\n\r\n    <div class=\"controls\" *ngIf=\"videoLoaded\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\r\n        <div class=\"progress\">\r\n            <mat-seek-progress-control [color]=\"color\" [video]=\"video\"></mat-seek-progress-control>\r\n        </div>\r\n\r\n        <div class=\"menu\">\r\n            <div class=\"left\">\r\n                <mat-play-button (playChanged)=\"playing = $event\" [video]=\"video\" [keyboard]=\"keyboard\"></mat-play-button>\r\n\r\n                <mat-volume-control [color]=\"color\" [video]=\"video\" [keyboard]=\"keyboard\"></mat-volume-control>\r\n\r\n                <mat-time-control [video]=\"video\"></mat-time-control>\r\n            </div>\r\n\r\n            <div class=\"right\">\r\n                <mat-quality-control *ngIf=\"quality\" [video]=\"video\"></mat-quality-control>\r\n\r\n                <mat-download-button *ngIf=\"download\" [title]=\"title\" [video]=\"video\"></mat-download-button>\r\n\r\n                <mat-fullscreen-button *ngIf=\"fullscreen\" (fullscreenChanged)=\"isFullscreen = $event\" [player]=\"player\"\r\n                    [keyboard]=\"keyboard\"></mat-fullscreen-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <mat-video-spinner [spinner]=\"spinner\" [video]=\"video\"></mat-video-spinner>\r\n</div>",
                    styles: [".videoplayer{font-family:Roboto,\"Helvetica Neue\",sans-serif;background-color:#000;position:relative;width:100%;height:100%}.header{color:#fff;display:flex;justify-content:center;align-items:center;position:absolute;left:0;top:0;padding:14px 0;width:100%;z-index:1;background-image:linear-gradient(to top,rgba(0,0,0,0),rgba(0,0,0,.65))}.video{display:block;width:100%;height:100%;z-index:0}.controls{color:#fff;position:absolute;left:0;bottom:0;width:100%;z-index:1;background-image:linear-gradient(to bottom,rgba(0,0,0,0),rgba(0,0,0,.65))}.controls .progress{height:26px}.controls .menu{display:flex;align-items:center;flex-direction:row;justify-content:space-between;height:48px}.controls .menu .left{justify-content:flex-start}.controls .menu .right{justify-content:flex-end}.visible{visibility:visible;opacity:1;transition:opacity .5s linear}.hidden{visibility:hidden;opacity:0;transition:visibility .5s,opacity .5s linear}.show-mouse{cursor:default}.hide-mouse{cursor:none}", "@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v36/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2')}::ng-deep.material-icons{font-family:'Material Icons';font-weight:400;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;font-feature-settings:'liga';-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased}"]
                }] }
    ];
    /** @nocollapse */
    MatVideoComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatVideoComponent.propDecorators = {
        player: [{ type: ViewChild, args: ['player',] }],
        video: [{ type: ViewChild, args: ['video',] }],
        src: [{ type: Input }],
        title: [{ type: Input }],
        autoplay: [{ type: Input }],
        preload: [{ type: Input }],
        loop: [{ type: Input }],
        quality: [{ type: Input }],
        fullscreen: [{ type: Input }],
        download: [{ type: Input }],
        color: [{ type: Input }],
        spinner: [{ type: Input }],
        poster: [{ type: Input }],
        keyboard: [{ type: Input }],
        overlay: [{ type: Input }]
    };
    return MatVideoComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVideoSourceDirective = /** @class */ (function () {
    function MatVideoSourceDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.type = null;
        this.init = true;
        this.video = matVideoComponent;
        this.source = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoSourceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.source.src = this.src;
        this.source.type = this.type;
        if (!this.init)
            this.video.load();
    };
    MatVideoSourceDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[matVideoSource]'
                },] }
    ];
    /** @nocollapse */
    MatVideoSourceDirective.ctorParameters = function () { return [
        { type: MatVideoComponent, decorators: [{ type: Host }] },
        { type: ElementRef }
    ]; };
    MatVideoSourceDirective.propDecorators = {
        src: [{ type: Input }],
        type: [{ type: Input }]
    };
    return MatVideoSourceDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVideoTrackDirective = /** @class */ (function () {
    function MatVideoTrackDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.kind = null;
        this.srclang = null;
        this.label = null;
        this.init = true;
        this.video = matVideoComponent;
        this.track = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoTrackDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.track.src = this.src;
        this.track.kind = this.kind;
        this.track.srclang = this.srclang;
        this.track.label = this.label;
        if (!this.init)
            this.video.load();
    };
    MatVideoTrackDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[matVideoTrack]'
                },] }
    ];
    /** @nocollapse */
    MatVideoTrackDirective.ctorParameters = function () { return [
        { type: MatVideoComponent, decorators: [{ type: Host }] },
        { type: ElementRef }
    ]; };
    MatVideoTrackDirective.propDecorators = {
        src: [{ type: Input }],
        kind: [{ type: Input }],
        srclang: [{ type: Input }],
        label: [{ type: Input }]
    };
    return MatVideoTrackDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Counter used to generate unique IDs for progress bars.
 * @type {?}
 */
var sliderprogressbarId = 0;
var MatSliderProgressBarComponent = /** @class */ (function (_super) {
    __extends(MatSliderProgressBarComponent, _super);
    function MatSliderProgressBarComponent(elementRef, focusMonitor, changeDetectorRef, dir, tabIndex) {
        var _this = _super.call(this, elementRef, focusMonitor, changeDetectorRef, dir, tabIndex) || this;
        _this.mode = 'buffer';
        _this.value = 0;
        _this._bufferValue = 0;
        /**
         * The id of the progress bar.
         */
        _this.sliderprogressbarId = "mat-slider-progress-bar-" + sliderprogressbarId++;
        _this.tabIndex = parseInt(tabIndex) || 0;
        return _this;
    }
    Object.defineProperty(MatSliderProgressBarComponent.prototype, "bufferValue", {
        /** Buffer value of the progress bar. Defaults to zero. */
        get: /**
         * Buffer value of the progress bar. Defaults to zero.
         * @return {?}
         */
        function () { return this._bufferValue; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._bufferValue = clamp(v || 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatSliderProgressBarComponent.prototype, "_trackBufferStyles", {
        /** CSS styles for the track fill element. */
        get: /**
         * CSS styles for the track fill element.
         * @return {?}
         */
        function () {
            if (this.mode === 'buffer') {
                /** @type {?} */
                var axis = this.vertical ? 'Y' : 'X';
                return {
                    'transform': "translate" + axis + "(0px) scale" + axis + "(" + this._bufferValue / 100 + ")"
                };
            }
        },
        enumerable: true,
        configurable: true
    });
    MatSliderProgressBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-slider-progress-bar',
                    template: "<div class=\"mat-slider-wrapper\" #sliderWrapper>\r\n    <div class=\"mat-slider-track-wrapper\">\r\n        <svg width=\"100%\" height=\"2\" focusable=\"false\" class=\"mat-slider-progress-background\">\r\n            <defs>\r\n                <pattern [id]=\"sliderprogressbarId\" x=\"2.5\" y=\"0\" width=\"5\" height=\"2.5\" patternUnits=\"userSpaceOnUse\">\r\n                    <circle cx=\"1.25\" cy=\"1.25\" r=\"1.25\" />\r\n                </pattern>\r\n            </defs>\r\n            <rect [attr.fill]=\"'url(#' + sliderprogressbarId + ')'\" width=\"100%\" height=\"100%\" />\r\n        </svg>\r\n        <div class=\"mat-slider-track-fill mat-slider-track-buffer\" [ngStyle]=\"_trackBufferStyles\"></div>\r\n        <div class=\"mat-slider-track-fill\" [ngStyle]=\"_trackFillStyles\"></div>\r\n    </div>\r\n    <div class=\"mat-slider-ticks-container\" [ngStyle]=\"_ticksContainerStyles\">\r\n        <div class=\"mat-slider-ticks\" [ngStyle]=\"_ticksStyles\"></div>\r\n    </div>\r\n    <div class=\"mat-slider-thumb-container\" [ngStyle]=\"_thumbContainerStyles\">\r\n        <div class=\"mat-slider-focus-ring\"></div>\r\n        <div class=\"mat-slider-thumb\"></div>\r\n        <div class=\"mat-slider-thumb-label\">\r\n            <span class=\"mat-slider-thumb-label-text\">{{displayValue}}</span>\r\n        </div>\r\n    </div>\r\n</div>",
                    providers: [MAT_SLIDER_VALUE_ACCESSOR],
                    host: {
                        '(focus)': '_onFocus()',
                        '(blur)': '_onBlur()',
                        '(click)': 'this["_onClick"] ? this["_onClick"]($event) : null',
                        // Angular 5/6 support
                        '(mousedown)': 'this["_onMousedown"] ? this["_onMousedown"]($event) : null',
                        // Angular 7 support
                        '(keydown)': '_onKeydown($event)',
                        '(keyup)': '_onKeyup()',
                        '(mouseenter)': '_onMouseenter()',
                        '(slide)': '_onSlide($event)',
                        '(slideend)': '_onSlideEnd()',
                        '(slidestart)': '_onSlideStart($event)',
                        'class': 'mat-slider',
                        'role': 'slider',
                        '[tabIndex]': 'tabIndex',
                        '[attr.aria-disabled]': 'disabled',
                        '[attr.aria-valuemax]': 'max',
                        '[attr.aria-valuemin]': 'min',
                        '[attr.aria-valuenow]': 'value',
                        '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                        '[class.mat-slider-disabled]': 'disabled',
                        '[class.mat-slider-has-ticks]': 'tickInterval',
                        '[class.mat-slider-horizontal]': '!vertical',
                        '[class.mat-slider-axis-inverted]': '_invertAxis',
                        '[class.mat-slider-sliding]': '_isSliding',
                        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',
                        '[class.mat-slider-vertical]': 'vertical',
                        '[class.mat-slider-min-value]': '_isMinValue',
                        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',
                    },
                    inputs: ['disabled', 'color', 'tabIndex'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{width:100%}.mat-slider-progress-background{position:absolute;height:2px;width:100%;fill:#d3d3d3}.mat-slider-track-buffer{background-color:#d3d3d3!important}.mat-slider-thumb{border-color:transparent!important;visibility:hidden;opacity:0;transition:visibility .2s,opacity .2s linear}:host:hover .mat-slider-thumb{visibility:visible;opacity:1;transition:opacity .2s linear}"]
                }] }
    ];
    /** @nocollapse */
    MatSliderProgressBarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FocusMonitor },
        { type: ChangeDetectorRef },
        { type: Directionality, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
    ]; };
    MatSliderProgressBarComponent.propDecorators = {
        mode: [{ type: Input }],
        value: [{ type: Input }],
        bufferValue: [{ type: Input }]
    };
    return MatSliderProgressBarComponent;
}(MatSlider));
/**
 * Clamps a value to be between two numbers, by default 0 and 100.
 * @param {?} v
 * @param {?=} min
 * @param {?=} max
 * @return {?}
 */
function clamp(v, min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 100; }
    return Math.max(min, Math.min(max, v));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SecondsToTimePipe = /** @class */ (function () {
    function SecondsToTimePipe() {
        this.times = {
            year: 31557600,
            month: 2629746,
            day: 86400,
            hour: 3600,
        };
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    SecondsToTimePipe.prototype.transform = /**
     * @param {?} seconds
     * @return {?}
     */
    function (seconds) {
        if (!seconds)
            return '0:00';
        else {
            /** @type {?} */
            var time_string = '';
            for (var key in this.times) {
                if (Math.floor(seconds / this.times[key]) > 0) {
                    time_string += Math.floor(seconds / this.times[key]).toString() + ':';
                    seconds = seconds - this.times[key] * Math.floor(seconds / this.times[key]);
                }
            }
            time_string += Math.floor(seconds / 60).toString() + ':';
            seconds = seconds - 60 * Math.floor(seconds / 60);
            if (Math.floor(seconds) < 10)
                time_string += '0';
            time_string += Math.floor(seconds).toString();
            return time_string;
        }
    };
    SecondsToTimePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'secondsToTime'
                },] }
    ];
    return SecondsToTimePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FullscreenService = /** @class */ (function () {
    function FullscreenService() {
        this.fnMap = [
            // Object keys
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            // New WebKit
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Old WebKit (Safari 5.1)
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Mozilla
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            // MS
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;
        /** @type {?} */
        var ret = {};
        /** @type {?} */
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in document) {
                for (i = 0; i < val.length; i++) {
                    // Map everything to the first list of keys
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.request = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var request = this.fn.requestFullscreen;
        elem = elem || document.documentElement;
        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed ? ((/** @type {?} */ (Element))).ALLOW_KEYBOARD_INPUT : {});
        }
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.exit = /**
     * @return {?}
     */
    function () {
        document[this.fn.exitFullscreen]();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.toggle = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onChange = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onError = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isFullscreen = /**
     * @return {?}
     */
    function () {
        return Boolean(document[this.fn.fullscreenElement]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(document[this.fn.fullscreenEnabled]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return document[this.fn.fullscreenElement];
    };
    FullscreenService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FullscreenService.ctorParameters = function () { return []; };
    return FullscreenService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatDownloadButtonComponent = /** @class */ (function () {
    function MatDownloadButtonComponent() {
    }
    MatDownloadButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-download-button',
                    template: "<a mat-icon-button [href]=\"video?.currentSrc\" [download]=\"title\">\r\n  <mat-icon>file_download</mat-icon>\r\n</a>",
                    styles: ["a{color:inherit;text-decoration:none}"]
                }] }
    ];
    /** @nocollapse */
    MatDownloadButtonComponent.ctorParameters = function () { return []; };
    MatDownloadButtonComponent.propDecorators = {
        video: [{ type: Input }],
        title: [{ type: Input }]
    };
    return MatDownloadButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatFullscreenButtonComponent = /** @class */ (function () {
    function MatFullscreenButtonComponent(fscreen, evt) {
        this.fscreen = fscreen;
        this.evt = evt;
        this.canFullscreen = false;
        this.fullscreen = false;
        this.fullscreenChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.fscreen.isEnabled())
            this.canFullscreen = true;
        this.fscreen.onChange(function (event) { return _this.fscreen.isFullscreen() ? _this.onChangesFullscreen(true) : _this.onChangesFullscreen(false); });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.setFullscreen = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.canFullscreen && this.fullscreen !== value)
            this.toggleFullscreen();
    };
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.toggleFullscreen = /**
     * @return {?}
     */
    function () {
        this.fullscreen = !this.fullscreen;
        this.updateFullscreen();
    };
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.updateFullscreen = /**
     * @return {?}
     */
    function () {
        this.fullscreen ? this.fscreen.request(this.player) : this.fscreen.exit();
        this.fullscreenChanged.emit(this.fullscreen);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.onChangesFullscreen = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.fullscreen = value;
        this.fullscreenChanged.emit(this.fullscreen);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.onFullscreenKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleFullscreen();
            event.preventDefault();
        }
    };
    MatFullscreenButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-fullscreen-button',
                    template: "<button mat-icon-button [disabled]=\"!canFullscreen\" (click)=\"toggleFullscreen()\">\r\n  <mat-icon *ngIf=\"!fullscreen\">fullscreen</mat-icon>\r\n  <mat-icon *ngIf=\"fullscreen\">fullscreen_exit</mat-icon>\r\n</button>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatFullscreenButtonComponent.ctorParameters = function () { return [
        { type: FullscreenService },
        { type: EventService }
    ]; };
    MatFullscreenButtonComponent.propDecorators = {
        player: [{ type: Input }],
        fullscreen: [{ type: Input }],
        fullscreenChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onFullscreenKey: [{ type: HostListener, args: ['document:keyup.f', ['$event'],] }]
    };
    return MatFullscreenButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatPlayButtonComponent = /** @class */ (function () {
    function MatPlayButtonComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.play = false;
        this.playChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'play', callback: function (event) { return _this.setVideoPlayback(true); }, dispose: null },
            { element: this.video, name: 'pause', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'durationchange', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'ended', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'click', callback: function (event) { return _this.toggleVideoPlayback(); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatPlayButtonComponent.prototype.setVideoPlayback = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.play !== value)
            this.toggleVideoPlayback();
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.toggleVideoPlayback = /**
     * @return {?}
     */
    function () {
        this.play = !this.play;
        this.updateVideoPlayback();
    };
    /**
     * @return {?}
     */
    MatPlayButtonComponent.prototype.updateVideoPlayback = /**
     * @return {?}
     */
    function () {
        this.play ? this.video.play() : this.video.pause();
        this.playChanged.emit(this.play);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatPlayButtonComponent.prototype.onPlayKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleVideoPlayback();
            event.preventDefault();
        }
    };
    MatPlayButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-play-button',
                    template: "<button mat-icon-button (click)=\"toggleVideoPlayback()\">\r\n  <mat-icon *ngIf=\"!play\">play_arrow</mat-icon>\r\n  <mat-icon *ngIf=\"play\">pause</mat-icon>\r\n</button>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatPlayButtonComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatPlayButtonComponent.propDecorators = {
        video: [{ type: Input }],
        play: [{ type: Input }],
        playChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onPlayKey: [{ type: HostListener, args: ['document:keyup.space', ['$event'],] }]
    };
    return MatPlayButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatQualityControlComponent = /** @class */ (function () {
    function MatQualityControlComponent() {
    }
    MatQualityControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-quality-control',
                    template: "<div *ngIf=\"video && video.videoHeight\" class=\"quality\">\r\n  {{ video.videoHeight }}p\r\n</div>",
                    styles: [".quality{display:inline-block;font-size:12px;padding-left:12px;padding-right:12px}"]
                }] }
    ];
    /** @nocollapse */
    MatQualityControlComponent.ctorParameters = function () { return []; };
    MatQualityControlComponent.propDecorators = {
        video: [{ type: Input }]
    };
    return MatQualityControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatSeekProgressControlComponent = /** @class */ (function () {
    function MatSeekProgressControlComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.curTimePercent = 0;
        this.bufTimePercent = 0;
        this.video = null;
        this.color = 'primary';
        this.currentTime = 0;
        this.currentTimeChanged = new EventEmitter();
        this.bufferedTime = 0;
        this.bufferedTimeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'seeking', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'canplaythrough', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null },
            { element: this.video, name: 'timeupdate', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'progress', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.seekVideo = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var percentage = value / 100;
        /** @type {?} */
        var newTime = this.video.duration * percentage;
        this.video.currentTime = newTime;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateCurrentTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.currentTime = time;
        this.curTimePercent = this.updateTime(this.currentTimeChanged, this.currentTime);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateBufferedTime = /**
     * @return {?}
     */
    function () {
        if (this.video.buffered.length > 0) {
            /** @type {?} */
            var largestBufferValue = 0;
            for (var i = 0; i < this.video.buffered.length; i++) {
                /** @type {?} */
                var cur = this.video.currentTime;
                /** @type {?} */
                var start = this.video.buffered.start(i);
                /** @type {?} */
                var end = this.video.buffered.end(i);
                if (start <= cur && end > cur && (end - start) > largestBufferValue)
                    largestBufferValue = end;
            }
            this.bufferedTime = largestBufferValue;
            this.bufTimePercent = this.updateTime(this.bufferedTimeChanged, this.bufferedTime);
        }
    };
    /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateTime = /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    function (emitter, time) {
        emitter.emit(time);
        return time / this.video.duration * 100;
    };
    MatSeekProgressControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-seek-progress-control',
                    template: "<mat-slider-progress-bar [color]=\"color\" mode=\"buffer\" step=\"0.01\" [value]=\"curTimePercent\" [bufferValue]=\"bufTimePercent\"\n  (input)=\"seekVideo($event.value)\"></mat-slider-progress-bar>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatSeekProgressControlComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatSeekProgressControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        currentTime: [{ type: Input }],
        currentTimeChanged: [{ type: Output }],
        bufferedTime: [{ type: Input }],
        bufferedTimeChanged: [{ type: Output }]
    };
    return MatSeekProgressControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatTimeControlComponent = /** @class */ (function () {
    function MatTimeControlComponent() {
    }
    MatTimeControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-time-control',
                    template: "<div class=\"playtime\">\r\n  {{ video?.currentTime | secondsToTime }} / {{ video?.duration | secondsToTime}}\r\n</div>",
                    styles: [".playtime{display:inline;font-size:12px}"]
                }] }
    ];
    /** @nocollapse */
    MatTimeControlComponent.ctorParameters = function () { return []; };
    MatTimeControlComponent.propDecorators = {
        video: [{ type: Input }]
    };
    return MatTimeControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVideoSpinnerComponent = /** @class */ (function () {
    function MatVideoSpinnerComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.spinner = 'spin';
        this.videoBuffering = false;
        this.videoLoaded = false;
        this.events = [];
    }
    /**
     * @return {?}
     */
    MatVideoSpinnerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'loadstart', callback: function (event) { return _this.videoLoaded = false; }, dispose: null },
            { element: this.video, name: 'loadedmetadata', callback: function (event) { return _this.videoLoaded = true; }, dispose: null },
            { element: this.video, name: 'canplay', callback: function (event) { return _this.videoBuffering = false; }, dispose: null },
            { element: this.video, name: 'waiting', callback: function (event) { return _this.videoBuffering = true; }, dispose: null },
            { element: this.video, name: 'durationchange', callback: function (event) { return _this.videoBuffering = true; }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatVideoSpinnerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    MatVideoSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-video-spinner',
                    template: "<div *ngIf=\"!videoLoaded || videoBuffering\" [class]=\"spinner\"></div>",
                    styles: [":host{position:absolute;left:calc(50% - 32px);top:calc(50% - 32px);z-index:1}", ".spin{box-sizing:border-box;width:64px;height:64px;border-radius:100%;border:10px solid rgba(255,255,255,.2);border-top-color:#fff;-webkit-animation:1s linear infinite spin;animation:1s linear infinite spin}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}", ".dot{width:64px;height:64px;background-color:#fff;border-radius:100%;-webkit-animation:1s ease-in-out infinite dot;animation:1s ease-in-out infinite dot}@-webkit-keyframes dot{0%{-webkit-transform:scale(0)}100%{-webkit-transform:scale(1);opacity:0}}@keyframes dot{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1);opacity:0}}", ".split-ring{display:inline-block;width:64px;height:64px}.split-ring:after{content:\" \";display:block;width:46px;height:46px;margin:1px;border-radius:50%;border:5px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s linear infinite split-ring;animation:1.2s linear infinite split-ring}@-webkit-keyframes split-ring{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes split-ring{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}", ".hourglass{display:inline-block;position:relative;width:64px;height:64px}.hourglass:after{content:\" \";display:block;border-radius:50%;width:0;height:0;margin:6px;box-sizing:border-box;border:26px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s infinite hourglass;animation:1.2s infinite hourglass}@-webkit-keyframes hourglass{0%{-webkit-transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg)}}@keyframes hourglass{0%{-webkit-transform:rotate(0);transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg);transform:rotate(720deg)}}"]
                }] }
    ];
    /** @nocollapse */
    MatVideoSpinnerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatVideoSpinnerComponent.propDecorators = {
        video: [{ type: Input }],
        spinner: [{ type: Input }]
    };
    return MatVideoSpinnerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVolumeControlComponent = /** @class */ (function () {
    function MatVolumeControlComponent(evt) {
        this.evt = evt;
        this.video = null;
        this.color = 'primary';
        this.volume = 1;
        this.volumeChanged = new EventEmitter();
        this.muted = false;
        this.mutedChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setVolume = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.volume = value;
        this.video.volume = this.volume;
        this.volumeChanged.emit(this.volume);
        if (this.volume > 0)
            this.setMuted(false);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatVolumeControlComponent.prototype.setMuted = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.muted !== value)
            this.toggleMuted();
    };
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.toggleMuted = /**
     * @return {?}
     */
    function () {
        this.muted = !this.muted;
        this.updateMuted();
    };
    /**
     * @return {?}
     */
    MatVolumeControlComponent.prototype.updateMuted = /**
     * @return {?}
     */
    function () {
        this.video.muted = this.muted;
        this.mutedChanged.emit(this.muted);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatVolumeControlComponent.prototype.onMuteKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleMuted();
            event.preventDefault();
        }
    };
    MatVolumeControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-volume-control',
                    template: "<div class=\"volume-control\">\r\n  <button mat-icon-button (click)=\"toggleMuted()\">\r\n    <mat-icon *ngIf=\"muted || volume === 0\">volume_off</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume > 0 && volume < 0.25\">volume_mute</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.25 && volume < 0.5\">volume_down</mat-icon>\r\n    <mat-icon *ngIf=\"!muted && volume >= 0.5\">volume_up</mat-icon>\r\n  </button>\r\n  <mat-slider class=\"volume-slider\" [color]=\"color\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\" (input)=\"setVolume($event.value)\">\r\n  </mat-slider>\r\n</div>",
                    styles: [".volume-control{display:inline}.volume-slider{margin-left:-15px}::ng-deep.mat-slider-thumb{border-color:transparent!important}::ng-deep.mat-slider-track-background{background-color:#d3d3d3!important;-webkit-transform:translateX(0)!important;transform:translateX(0)!important}.volume-control .volume-slider{visibility:hidden;opacity:0;min-width:0;width:0;transition:visibility .2s,opacity .2s linear,width .2s linear}.volume-control:hover .volume-slider{visibility:visible;opacity:1;min-width:90px;width:90px;transition:opacity .2s linear,width .2s linear,min-width .2s linear}"]
                }] }
    ];
    /** @nocollapse */
    MatVolumeControlComponent.ctorParameters = function () { return [
        { type: EventService }
    ]; };
    MatVolumeControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        volume: [{ type: Input }],
        volumeChanged: [{ type: Output }],
        muted: [{ type: Input }],
        mutedChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onMuteKey: [{ type: HostListener, args: ['document:keyup.m', ['$event'],] }]
    };
    return MatVolumeControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var MatVideoModule = /** @class */ (function () {
    function MatVideoModule() {
    }
    MatVideoModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SecondsToTimePipe,
                        MatVideoComponent,
                        MatSliderProgressBarComponent,
                        MatPlayButtonComponent,
                        MatVolumeControlComponent,
                        MatDownloadButtonComponent,
                        MatFullscreenButtonComponent,
                        MatTimeControlComponent,
                        MatQualityControlComponent,
                        MatVideoSpinnerComponent,
                        MatSeekProgressControlComponent,
                        MatVideoSourceDirective,
                        MatVideoTrackDirective
                    ],
                    imports: [
                        CommonModule,
                        MatIconModule,
                        MatButtonModule,
                        MatSliderModule
                    ],
                    exports: [
                        MatVideoComponent,
                        MatVideoSourceDirective,
                        MatVideoTrackDirective
                    ],
                    providers: [
                        FullscreenService,
                        EventService
                    ]
                },] }
    ];
    return MatVideoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { MatVideoModule, MatVideoSourceDirective as ɵn, MatVideoTrackDirective as ɵo, MatSliderProgressBarComponent as ɵd, SecondsToTimePipe as ɵa, EventService as ɵc, FullscreenService as ɵi, MatDownloadButtonComponent as ɵg, MatFullscreenButtonComponent as ɵh, MatPlayButtonComponent as ɵe, MatQualityControlComponent as ɵk, MatSeekProgressControlComponent as ɵm, MatTimeControlComponent as ɵj, MatVideoSpinnerComponent as ɵl, MatVolumeControlComponent as ɵf, MatVideoComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,