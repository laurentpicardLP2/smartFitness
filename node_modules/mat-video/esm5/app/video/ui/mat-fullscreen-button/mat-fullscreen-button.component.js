/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { EventService } from '../../services/event.service';
import { FullscreenService } from '../../services/fullscreen.service';
var MatFullscreenButtonComponent = /** @class */ (function () {
    function MatFullscreenButtonComponent(fscreen, evt) {
        this.fscreen = fscreen;
        this.evt = evt;
        this.canFullscreen = false;
        this.fullscreen = false;
        this.fullscreenChanged = new EventEmitter();
        this.keyboard = true;
    }
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.fscreen.isEnabled())
            this.canFullscreen = true;
        this.fscreen.onChange(function (event) { return _this.fscreen.isFullscreen() ? _this.onChangesFullscreen(true) : _this.onChangesFullscreen(false); });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.setFullscreen = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.canFullscreen && this.fullscreen !== value)
            this.toggleFullscreen();
    };
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.toggleFullscreen = /**
     * @return {?}
     */
    function () {
        this.fullscreen = !this.fullscreen;
        this.updateFullscreen();
    };
    /**
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.updateFullscreen = /**
     * @return {?}
     */
    function () {
        this.fullscreen ? this.fscreen.request(this.player) : this.fscreen.exit();
        this.fullscreenChanged.emit(this.fullscreen);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.onChangesFullscreen = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.fullscreen = value;
        this.fullscreenChanged.emit(this.fullscreen);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatFullscreenButtonComponent.prototype.onFullscreenKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.keyboard) {
            this.toggleFullscreen();
            event.preventDefault();
        }
    };
    MatFullscreenButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-fullscreen-button',
                    template: "<button mat-icon-button [disabled]=\"!canFullscreen\" (click)=\"toggleFullscreen()\">\r\n  <mat-icon *ngIf=\"!fullscreen\">fullscreen</mat-icon>\r\n  <mat-icon *ngIf=\"fullscreen\">fullscreen_exit</mat-icon>\r\n</button>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatFullscreenButtonComponent.ctorParameters = function () { return [
        { type: FullscreenService },
        { type: EventService }
    ]; };
    MatFullscreenButtonComponent.propDecorators = {
        player: [{ type: Input }],
        fullscreen: [{ type: Input }],
        fullscreenChanged: [{ type: Output }],
        keyboard: [{ type: Input }],
        onFullscreenKey: [{ type: HostListener, args: ['document:keyup.f', ['$event'],] }]
    };
    return MatFullscreenButtonComponent;
}());
export { MatFullscreenButtonComponent };
if (false) {
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.canFullscreen;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.player;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.fullscreen;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.fullscreenChanged;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.keyboard;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.fscreen;
    /** @type {?} */
    MatFullscreenButtonComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZ1bGxzY3JlZW4tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC12aWRlby8iLCJzb3VyY2VzIjpbImFwcC92aWRlby91aS9tYXQtZnVsbHNjcmVlbi1idXR0b24vbWF0LWZ1bGxzY3JlZW4tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXRFO0lBZ0JFLHNDQUNVLE9BQTBCLEVBQzFCLEdBQWlCO1FBRGpCLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBQzFCLFFBQUcsR0FBSCxHQUFHLENBQWM7UUFaM0Isa0JBQWEsR0FBWSxLQUFLLENBQUM7UUFJdEIsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUUzQixzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO1FBRWpELGFBQVEsR0FBWSxJQUFJLENBQUM7SUFLOUIsQ0FBQzs7OztJQUVMLCtDQUFROzs7SUFBUjtRQUFBLGlCQUtDO1FBSkMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUE5RixDQUE4RixDQUFDLENBQUM7SUFDakksQ0FBQzs7Ozs7SUFFRCxvREFBYTs7OztJQUFiLFVBQWMsS0FBYztRQUMxQixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxLQUFLO1lBQ2pELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCx1REFBZ0I7OztJQUFoQjtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCx1REFBZ0I7OztJQUFoQjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELDBEQUFtQjs7OztJQUFuQixVQUFvQixLQUFjO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7O0lBR0Qsc0RBQWU7Ozs7SUFEZixVQUNnQixLQUFvQjtRQUNsQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7Z0JBdERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyx3T0FBcUQ7O2lCQUV0RDs7OztnQkFOUSxpQkFBaUI7Z0JBRGpCLFlBQVk7Ozt5QkFXbEIsS0FBSzs2QkFFTCxLQUFLO29DQUVMLE1BQU07MkJBRU4sS0FBSztrQ0FrQ0wsWUFBWSxTQUFDLGtCQUFrQixFQUFFLENBQUMsUUFBUSxDQUFDOztJQVE5QyxtQ0FBQztDQUFBLEFBeERELElBd0RDO1NBbkRZLDRCQUE0Qjs7O0lBQ3ZDLHFEQUErQjs7SUFFL0IsOENBQWtDOztJQUVsQyxrREFBcUM7O0lBRXJDLHlEQUEwRDs7SUFFMUQsZ0RBQWtDOztJQUdoQywrQ0FBa0M7O0lBQ2xDLDJDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZXZlbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IEZ1bGxzY3JlZW5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZnVsbHNjcmVlbi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbWF0LWZ1bGxzY3JlZW4tYnV0dG9uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbWF0LWZ1bGxzY3JlZW4tYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9tYXQtZnVsbHNjcmVlbi1idXR0b24uY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXRGdWxsc2NyZWVuQnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBjYW5GdWxsc2NyZWVuOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgpIHBsYXllcjogSFRNTFZpZGVvRWxlbWVudDtcclxuXHJcbiAgQElucHV0KCkgZnVsbHNjcmVlbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBAT3V0cHV0KCkgZnVsbHNjcmVlbkNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcblxyXG4gIEBJbnB1dCgpIGtleWJvYXJkOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGZzY3JlZW46IEZ1bGxzY3JlZW5TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBldnQ6IEV2ZW50U2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZnNjcmVlbi5pc0VuYWJsZWQoKSlcclxuICAgICAgdGhpcy5jYW5GdWxsc2NyZWVuID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmZzY3JlZW4ub25DaGFuZ2UoZXZlbnQgPT4gdGhpcy5mc2NyZWVuLmlzRnVsbHNjcmVlbigpID8gdGhpcy5vbkNoYW5nZXNGdWxsc2NyZWVuKHRydWUpIDogdGhpcy5vbkNoYW5nZXNGdWxsc2NyZWVuKGZhbHNlKSk7XHJcbiAgfVxyXG5cclxuICBzZXRGdWxsc2NyZWVuKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy5jYW5GdWxsc2NyZWVuICYmIHRoaXMuZnVsbHNjcmVlbiAhPT0gdmFsdWUpXHJcbiAgICAgIHRoaXMudG9nZ2xlRnVsbHNjcmVlbigpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRnVsbHNjcmVlbigpOiB2b2lkIHtcclxuICAgIHRoaXMuZnVsbHNjcmVlbiA9ICF0aGlzLmZ1bGxzY3JlZW47XHJcbiAgICB0aGlzLnVwZGF0ZUZ1bGxzY3JlZW4oKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUZ1bGxzY3JlZW4oKTogdm9pZCB7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4gPyB0aGlzLmZzY3JlZW4ucmVxdWVzdCh0aGlzLnBsYXllcikgOiB0aGlzLmZzY3JlZW4uZXhpdCgpO1xyXG4gICAgdGhpcy5mdWxsc2NyZWVuQ2hhbmdlZC5lbWl0KHRoaXMuZnVsbHNjcmVlbik7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZXNGdWxsc2NyZWVuKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmZ1bGxzY3JlZW4gPSB2YWx1ZTtcclxuICAgIHRoaXMuZnVsbHNjcmVlbkNoYW5nZWQuZW1pdCh0aGlzLmZ1bGxzY3JlZW4pO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5dXAuZicsIFsnJGV2ZW50J10pXHJcbiAgb25GdWxsc2NyZWVuS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5rZXlib2FyZCkge1xyXG4gICAgICB0aGlzLnRvZ2dsZUZ1bGxzY3JlZW4oKTtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==