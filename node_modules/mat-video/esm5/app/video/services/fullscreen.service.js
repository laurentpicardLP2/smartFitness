/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var FullscreenService = /** @class */ (function () {
    function FullscreenService() {
        this.fnMap = [
            // Object keys
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            // New WebKit
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Old WebKit (Safari 5.1)
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Mozilla
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            // MS
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;
        /** @type {?} */
        var ret = {};
        /** @type {?} */
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in document) {
                for (i = 0; i < val.length; i++) {
                    // Map everything to the first list of keys
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.request = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var request = this.fn.requestFullscreen;
        elem = elem || document.documentElement;
        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed ? ((/** @type {?} */ (Element))).ALLOW_KEYBOARD_INPUT : {});
        }
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.exit = /**
     * @return {?}
     */
    function () {
        document[this.fn.exitFullscreen]();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    FullscreenService.prototype.toggle = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onChange = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    FullscreenService.prototype.onError = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        document.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isFullscreen = /**
     * @return {?}
     */
    function () {
        return Boolean(document[this.fn.fullscreenElement]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(document[this.fn.fullscreenEnabled]);
    };
    /**
     * @return {?}
     */
    FullscreenService.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return document[this.fn.fullscreenElement];
    };
    FullscreenService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FullscreenService.ctorParameters = function () { return []; };
    return FullscreenService;
}());
export { FullscreenService };
if (false) {
    /** @type {?} */
    FullscreenService.prototype.fnMap;
    /** @type {?} */
    FullscreenService.prototype.fn;
    /** @type {?} */
    FullscreenService.prototype.keyboardAllowed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbHNjcmVlbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWF0LXZpZGVvLyIsInNvdXJjZXMiOlsiYXBwL3ZpZGVvL3NlcnZpY2VzL2Z1bGxzY3JlZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQXdESTtRQXJEUSxVQUFLLEdBQWU7WUFDeEIsY0FBYztZQUNkO2dCQUNJLG1CQUFtQjtnQkFDbkIsZ0JBQWdCO2dCQUNoQixtQkFBbUI7Z0JBQ25CLG1CQUFtQjtnQkFDbkIsa0JBQWtCO2dCQUNsQixpQkFBaUI7YUFDcEI7WUFDRCxhQUFhO1lBQ2I7Z0JBQ0kseUJBQXlCO2dCQUN6QixzQkFBc0I7Z0JBQ3RCLHlCQUF5QjtnQkFDekIseUJBQXlCO2dCQUN6Qix3QkFBd0I7Z0JBQ3hCLHVCQUF1QjthQUUxQjtZQUNELDBCQUEwQjtZQUMxQjtnQkFDSSx5QkFBeUI7Z0JBQ3pCLHdCQUF3QjtnQkFDeEIsZ0NBQWdDO2dCQUNoQyx3QkFBd0I7Z0JBQ3hCLHdCQUF3QjtnQkFDeEIsdUJBQXVCO2FBRTFCO1lBQ0QsVUFBVTtZQUNWO2dCQUNJLHNCQUFzQjtnQkFDdEIscUJBQXFCO2dCQUNyQixzQkFBc0I7Z0JBQ3RCLHNCQUFzQjtnQkFDdEIscUJBQXFCO2dCQUNyQixvQkFBb0I7YUFDdkI7WUFDRCxLQUFLO1lBQ0w7Z0JBQ0kscUJBQXFCO2dCQUNyQixrQkFBa0I7Z0JBQ2xCLHFCQUFxQjtnQkFDckIscUJBQXFCO2dCQUNyQixvQkFBb0I7Z0JBQ3BCLG1CQUFtQjthQUN0QjtTQUNKLENBQUM7UUFNRSxJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxzQkFBc0IsSUFBSSxPQUFPLENBQUM7O1lBQ3JGLEdBQUcsR0FBUSxFQUFFOztZQUNmLEdBQUc7UUFFUCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxD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IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGdWxsc2NyZWVuQ29udHJvbHMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2Z1bGxzY3JlZW4tY29udHJvbHMuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZ1bGxzY3JlZW5TZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIGZuTWFwOiBzdHJpbmdbXVtdID0gW1xyXG4gICAgICAgIC8vIE9iamVjdCBrZXlzXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAncmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG4gICAgICAgICAgICAnZXhpdEZ1bGxzY3JlZW4nLFxyXG4gICAgICAgICAgICAnZnVsbHNjcmVlbkVsZW1lbnQnLFxyXG4gICAgICAgICAgICAnZnVsbHNjcmVlbkVuYWJsZWQnLFxyXG4gICAgICAgICAgICAnZnVsbHNjcmVlbmNoYW5nZScsXHJcbiAgICAgICAgICAgICdmdWxsc2NyZWVuZXJyb3InXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvLyBOZXcgV2ViS2l0XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG4gICAgICAgICAgICAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLFxyXG4gICAgICAgICAgICAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLFxyXG4gICAgICAgICAgICAnd2Via2l0RnVsbHNjcmVlbkVuYWJsZWQnLFxyXG4gICAgICAgICAgICAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXHJcbiAgICAgICAgICAgICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXHJcblxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gT2xkIFdlYktpdCAoU2FmYXJpIDUuMSlcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgICd3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbicsXHJcbiAgICAgICAgICAgICd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcclxuICAgICAgICAgICAgJ3dlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudCcsXHJcbiAgICAgICAgICAgICd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcclxuICAgICAgICAgICAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxyXG4gICAgICAgICAgICAnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xyXG5cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIE1vemlsbGFcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgICdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXHJcbiAgICAgICAgICAgICdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcclxuICAgICAgICAgICAgJ21vekZ1bGxTY3JlZW5FbGVtZW50JyxcclxuICAgICAgICAgICAgJ21vekZ1bGxTY3JlZW5FbmFibGVkJyxcclxuICAgICAgICAgICAgJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLFxyXG4gICAgICAgICAgICAnbW96ZnVsbHNjcmVlbmVycm9yJ1xyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gTVNcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgICdtc1JlcXVlc3RGdWxsc2NyZWVuJyxcclxuICAgICAgICAgICAgJ21zRXhpdEZ1bGxzY3JlZW4nLFxyXG4gICAgICAgICAgICAnbXNGdWxsc2NyZWVuRWxlbWVudCcsXHJcbiAgICAgICAgICAgICdtc0Z1bGxzY3JlZW5FbmFibGVkJyxcclxuICAgICAgICAgICAgJ01TRnVsbHNjcmVlbkNoYW5nZScsXHJcbiAgICAgICAgICAgICdNU0Z1bGxzY3JlZW5FcnJvcidcclxuICAgICAgICBdXHJcbiAgICBdO1xyXG5cclxuICAgIHByaXZhdGUgZm46IEZ1bGxzY3JlZW5Db250cm9scztcclxuICAgIHByaXZhdGUga2V5Ym9hcmRBbGxvd2VkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmRBbGxvd2VkID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICdBTExPV19LRVlCT0FSRF9JTlBVVCcgaW4gRWxlbWVudDtcclxuICAgICAgICBjb25zdCByZXQ6IGFueSA9IHt9O1xyXG4gICAgICAgIGxldCB2YWw7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mbk1hcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmZuTWFwW2ldO1xyXG4gICAgICAgICAgICBpZiAodmFsICYmIHZhbFsxXSBpbiBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCBldmVyeXRoaW5nIHRvIHRoZSBmaXJzdCBsaXN0IG9mIGtleXNcclxuICAgICAgICAgICAgICAgICAgICByZXRbdGhpcy5mbk1hcFswXVtpXS50b1N0cmluZygpXSA9IHZhbFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZm4gPSByZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlcXVlc3QoZWxlbTogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZm4ucmVxdWVzdEZ1bGxzY3JlZW47XHJcblxyXG4gICAgICAgIGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcbiAgICAgICAgLy8gV29yayBhcm91bmQgU2FmYXJpIDUuMSBidWc6IHJlcG9ydHMgc3VwcG9ydCBmb3JcclxuICAgICAgICAvLyBrZXlib2FyZCBpbiBmdWxsc2NyZWVuIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3QuXHJcbiAgICAgICAgLy8gQnJvd3NlciBzbmlmZmluZywgc2luY2UgdGhlIGFsdGVybmF0aXZlIHdpdGhcclxuICAgICAgICAvLyBzZXRUaW1lb3V0IGlzIGV2ZW4gd29yc2UuXHJcbiAgICAgICAgaWYgKC81XFwuMVsuXFxkXSogU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XHJcbiAgICAgICAgICAgIGVsZW1bcmVxdWVzdF0oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtW3JlcXVlc3RdKHRoaXMua2V5Ym9hcmRBbGxvd2VkID8gKEVsZW1lbnQgYXMgYW55KS5BTExPV19LRVlCT0FSRF9JTlBVVCA6IHt9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4aXQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnRbdGhpcy5mbi5leGl0RnVsbHNjcmVlbl0oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9nZ2xlKGVsZW06IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhpdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdChlbGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQ2hhbmdlKGNhbGxiYWNrOiBhbnkpIHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZm4uZnVsbHNjcmVlbmNoYW5nZSwgY2FsbGJhY2ssIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25FcnJvcihjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmZuLmZ1bGxzY3JlZW5lcnJvciwgY2FsbGJhY2ssIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNGdWxsc2NyZWVuKCkge1xyXG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50W3RoaXMuZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNFbmFibGVkKCkge1xyXG4gICAgICAgIC8vIENvZXJjZSB0byBib29sZWFuIGluIGNhc2Ugb2Ygb2xkIFdlYktpdFxyXG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50W3RoaXMuZm4uZnVsbHNjcmVlbkVuYWJsZWRdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnRbdGhpcy5mbi5mdWxsc2NyZWVuRWxlbWVudF07XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==