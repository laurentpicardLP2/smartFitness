/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from '@angular/core';
import { MatVideoComponent } from '../video.component';
var MatVideoTrackDirective = /** @class */ (function () {
    function MatVideoTrackDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.kind = null;
        this.srclang = null;
        this.label = null;
        this.init = true;
        this.video = matVideoComponent;
        this.track = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoTrackDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.track.src = this.src;
        this.track.kind = this.kind;
        this.track.srclang = this.srclang;
        this.track.label = this.label;
        if (!this.init)
            this.video.load();
    };
    MatVideoTrackDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[matVideoTrack]'
                },] }
    ];
    /** @nocollapse */
    MatVideoTrackDirective.ctorParameters = function () { return [
        { type: MatVideoComponent, decorators: [{ type: Host }] },
        { type: ElementRef }
    ]; };
    MatVideoTrackDirective.propDecorators = {
        src: [{ type: Input }],
        kind: [{ type: Input }],
        srclang: [{ type: Input }],
        label: [{ type: Input }]
    };
    return MatVideoTrackDirective;
}());
export { MatVideoTrackDirective };
if (false) {
    /** @type {?} */
    MatVideoTrackDirective.prototype.src;
    /** @type {?} */
    MatVideoTrackDirective.prototype.kind;
    /** @type {?} */
    MatVideoTrackDirective.prototype.srclang;
    /** @type {?} */
    MatVideoTrackDirective.prototype.label;
    /** @type {?} */
    MatVideoTrackDirective.prototype.init;
    /** @type {?} */
    MatVideoTrackDirective.prototype.video;
    /** @type {?} */
    MatVideoTrackDirective.prototype.track;
    /** @type {?} */
    MatVideoTrackDirective.prototype.matVideoComponent;
    /** @type {?} */
    MatVideoTrackDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXRyYWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC12aWRlby8iLCJzb3VyY2VzIjpbImFwcC92aWRlby9kaXJlY3RpdmVzL21hdC12aWRlby10cmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXZEO0lBYUksZ0NBQ29CLGlCQUFvQyxFQUM1QyxFQUFjO1FBRE4sc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUM1QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBWGpCLFFBQUcsR0FBVyxJQUFJLENBQUM7UUFDbkIsU0FBSSxHQUFXLElBQUksQ0FBQztRQUNwQixZQUFPLEdBQVcsSUFBSSxDQUFDO1FBQ3ZCLFVBQUssR0FBVyxJQUFJLENBQUM7UUFFdEIsU0FBSSxHQUFHLElBQUksQ0FBQztRQVFoQixJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELDRDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Z0JBOUJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs7OztnQkFKUSxpQkFBaUIsdUJBZ0JqQixJQUFJO2dCQWxCTyxVQUFVOzs7c0JBUXpCLEtBQUs7dUJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUNMLEtBQUs7O0lBeUJWLDZCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0E3Qlksc0JBQXNCOzs7SUFDL0IscUNBQTRCOztJQUM1QixzQ0FBNkI7O0lBQzdCLHlDQUFnQzs7SUFDaEMsdUNBQThCOztJQUU5QixzQ0FBb0I7O0lBQ3BCLHVDQUFpQzs7SUFDakMsdUNBQWdDOztJQUc1QixtREFBb0Q7O0lBQ3BELG9DQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgTWF0VmlkZW9Db21wb25lbnQgfSBmcm9tICcuLi92aWRlby5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1ttYXRWaWRlb1RyYWNrXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdFZpZGVvVHJhY2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgc3JjOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQElucHV0KCkga2luZDogc3RyaW5nID0gbnVsbDtcclxuICAgIEBJbnB1dCgpIHNyY2xhbmc6IHN0cmluZyA9IG51bGw7XHJcbiAgICBASW5wdXQoKSBsYWJlbDogc3RyaW5nID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGluaXQgPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSB2aWRlbzogTWF0VmlkZW9Db21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHRyYWNrOiBIVE1MVHJhY2tFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBIb3N0KCkgcHJpdmF0ZSBtYXRWaWRlb0NvbXBvbmVudDogTWF0VmlkZW9Db21wb25lbnQsXHJcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZlxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy52aWRlbyA9IG1hdFZpZGVvQ29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMudHJhY2sgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuaW5pdCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRyYWNrLnNyYyA9IHRoaXMuc3JjO1xyXG4gICAgICAgIHRoaXMudHJhY2sua2luZCA9IHRoaXMua2luZDtcclxuICAgICAgICB0aGlzLnRyYWNrLnNyY2xhbmcgPSB0aGlzLnNyY2xhbmc7XHJcbiAgICAgICAgdGhpcy50cmFjay5sYWJlbCA9IHRoaXMubGFiZWw7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pbml0KVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvLmxvYWQoKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19