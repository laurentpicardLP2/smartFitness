/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package laurent.fitness;

import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import laurent.fitness.model.Authority;
import laurent.fitness.model.Customer;
import laurent.fitness.model.Facility;
import laurent.fitness.model.FacilityCategory;
import laurent.fitness.model.Room;
import laurent.fitness.model.Staff;
import laurent.fitness.model.User;
import laurent.fitness.repository.AuthorityRepository;
import laurent.fitness.repository.CustomerRepository;
import laurent.fitness.repository.FacilityCategoryRepository;
import laurent.fitness.repository.FacilityRepository;
import laurent.fitness.repository.RoomRepository;
import laurent.fitness.repository.StaffRepository;
import laurent.fitness.repository.UserRepository;



@SpringBootApplication
public class Fitness implements CommandLineRunner {
    public boolean someLibraryMethod() {
        return true;
    }
    @Autowired
	private AuthorityRepository authorityRepository;
    
    @Autowired
	private StaffRepository staffRepository;
    
    @Autowired
	private CustomerRepository customerRepository;
    
    @Autowired
	private UserRepository userRepository;
    
    @Autowired 
    private RoomRepository roomRepository;
    
    @Autowired
    private FacilityCategoryRepository facilityCategoryRepository;
    
    @Autowired
    private FacilityRepository facilityRepository;


	public static void main(String[] args) throws Exception, MalformedURLException, IOException, ClassNotFoundException, SQLException {
		SpringApplication.run(Fitness.class, args);
	}

	@Override
	public void run(String... args)
			throws Exception,  MalformedURLException, IOException, ClassNotFoundException, SQLException {
		
//		int idUser = 0;
//		BCryptPasswordEncoder bcrypt = new BCryptPasswordEncoder();
//		
//		if( (this.staffRepository.findByUsername("db_abonne") == null)) {
//			try {
//				idUser = this.userRepository.findByUsernameIdMax().getIdUser() + 1;
//			} catch (Exception e) {
//				idUser = 1;
//			}
//			finally {
//				this.authorityRepository.save(new Authority("db_abonne", "ROLE_CUSTOMER"));
//				this.staffRepository.save(new Staff(idUser, "db_abonne", "sysabonne", "{bcrypt}" + bcrypt.encode("simplon"),"", "", new Date(), (byte)(1), "", ""));				
//			}
//		}
//		
//		if( (this.staffRepository.findByUsername("db_manager") == null)) {
//			try {
//				idUser = this.userRepository.findByUsernameIdMax().getIdUser() + 1;
//			} catch (Exception e) {
//				idUser = 1;
//			}
//			finally {
//				this.authorityRepository.save(new Authority("db_manager", "ROLE_MANAGER"));
//				this.staffRepository.save(new Staff(idUser, "db_manager", "sysmanager", "{bcrypt}" + bcrypt.encode("simplon"),"", "", new Date(), (byte)(1), "", ""));				
//			}
//		}
//		
//		if( (this.customerRepository.findByUsername("db_user") == null)) {
//			try {
//				idUser = this.userRepository.findByUsernameIdMax().getIdUser() + 1;
//			} catch (Exception e) {
//				idUser = 1;
//			}
//			finally {
//				this.authorityRepository.save(new Authority("db_user", "ROLE_CUSTOMER"));
//				this.customerRepository.save(new Customer(idUser, "db_user", "customer", "{bcrypt}" + bcrypt.encode("simplon"),"", "", new Date(), (byte)(1), new Date(),"","","","","","","",""));
//			}
//		}
//
//		if( (this.customerRepository.findByUsername("db_sebastien") == null)) {
//			try {
//				idUser = this.userRepository.findByUsernameIdMax().getIdUser() + 1;
//			} catch (Exception e) {
//				idUser = 1;
//			}
//			finally {
//				this.authorityRepository.save(new Authority("db_sebastien", "ROLE_CUSTOMER"));
//				this.customerRepository.save(new Customer(idUser, "db_sebastien", "customer", "{bcrypt}" + bcrypt.encode("Azerty12!"),"", "", new Date(), (byte)(1), new Date(),"","","","","","","",""));
//			}
//		}


	}
	
	
    
}
