{"version":3,"sources":["ng://@ngmodule/material-carousel/lib/carousel-slide/carousel-slide.component.ts","ng://@ngmodule/material-carousel/lib/carousel.component.ts","ng://@ngmodule/material-carousel/lib/carousel.module.ts"],"names":["MatCarouselSlideComponent","this","overlayColor","hideOverlay","disabled","prototype","ngOnInit","image","Component","args","selector","template","Input","ViewChild","TemplateRef","Left","Right","Index","MatCarouselComponent","animationBuilder","renderer","platformId","timings","hideArrows","hideIndicators","color","proportion","useKeyboard","useMouseWheel","_autoplay","autoplay$","Subject","interval$","BehaviorSubject","slides$","_maxWidth","maxWidth$","_loop","loop$","_orientation","orientation$","timerStop$","destroy$","playing","Object","defineProperty","value","next","listKeyManager","activeItemIndex","activeItem","ngAfterContentInit","_this","ListKeyManager","slidesList","withVerticalOrientation","withHorizontalOrientation","withWrap","updateActiveItem","change","pipe","takeUntil","subscribe","playAnimation","ngAfterViewInit","stopTimer","startTimer","resetTimer","slideTo","filter","length","resetSlides","ngOnDestroy","complete","goto","Direction","previous","index","onKeyUp","event","onKeydown","onMouseEnter","onMouseLeave","onMouseWheel","preventDefault","Δ","Math","sign","wheelDelta","onResize","onPan","slideElem","Δx","deltaX","isOutOfBounds","setStyle","carouselList","nativeElement","getTranslation","getOffset","onPanEnd","removeStyle","abs","getWidth","left","orientation","getBoundingClientRect","offsetParent","lastIndex","width","isVisible","isPlatformBrowser","elem","carouselContainer","docViewTop","window","pageYOffset","docViewBottom","innerHeight","elemOffset","elemTop","top","height","offset","clientWidth","direction","rtl","setNextItemActive","setPreviousItemActive","setActiveItem","translation","animation","build","animate","style","transform","create","onStart","onDone","destroy","play","slides","reset","toArray","slice","timer$","interval","autoplay","loop","AnimationBuilder","Renderer2","Inject","PLATFORM_ID","ContentChildren","HostListener","MatCarouselModule","NgModule","declarations","imports","CommonModule","MatButtonModule","MatIconModule","exports"],"mappings":"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","sourcesContent":["import { ListKeyManagerOption } from '@angular/cdk/a11y';\nimport {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\n\nimport { MatCarouselSlide } from './carousel-slide';\n\n@Component({\n  selector: 'mat-carousel-slide',\n  templateUrl: './carousel-slide.component.html',\n  styleUrls: ['./carousel-slide.component.scss']\n})\nexport class MatCarouselSlideComponent\n  implements ListKeyManagerOption, MatCarouselSlide, OnInit {\n  @Input() public image: string;\n  @Input() public overlayColor = '#00000040';\n  @Input() public hideOverlay = false;\n  @Input() public disabled = false; // implements ListKeyManagerOption\n\n  @ViewChild(TemplateRef) public templateRef: TemplateRef<any>;\n\n  public ngOnInit(): void {\n    if (this.image) {\n      this.image = `url(\"${this.image}\")`;\n    }\n  }\n}\n","import { animate, style, AnimationBuilder } from '@angular/animations';\nimport { ListKeyManager } from '@angular/cdk/a11y';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { ThemePalette } from '@angular/material';\nimport { interval, BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { MatCarousel, Orientation } from './carousel';\nimport { MatCarouselSlideComponent } from './carousel-slide/carousel-slide.component';\n\nenum Direction {\n  Left,\n  Right,\n  Index\n}\n\n@Component({\n  selector: 'mat-carousel',\n  templateUrl: './carousel.component.html',\n  styleUrls: ['./carousel.component.scss']\n})\nexport class MatCarouselComponent\n  implements AfterContentInit, AfterViewInit, MatCarousel, OnDestroy {\n  @Input() public timings = '250ms ease-in';\n\n  @Input()\n  public set autoplay(value: boolean) {\n    this.autoplay$.next(value);\n    this._autoplay = value;\n  }\n\n  @Input()\n  public set interval(value: number) {\n    this.interval$.next(value);\n  }\n\n  public get loop(): boolean {\n    return this._loop;\n  }\n  @Input()\n  public set loop(value: boolean) {\n    this.loop$.next(value);\n    this._loop = value;\n  }\n\n  @Input() public hideArrows = true;\n  @Input() public hideIndicators = true;\n  @Input() public color: ThemePalette = 'accent';\n\n  public get maxWidth(): string {\n    return this._maxWidth;\n  }\n  @Input()\n  public set maxWidth(value: string) {\n    this._maxWidth = value;\n    this.maxWidth$.next();\n  }\n\n  @Input() public proportion = 25;\n\n  @Input()\n  public set slides(value: number) {\n    this.slides$.next(value);\n  }\n\n  @Input() public useKeyboard = false;\n  @Input() public useMouseWheel = false;\n\n  public get orientation(): Orientation {\n    return this._orientation;\n  }\n  @Input()\n  public set orientation(value: Orientation) {\n    this.orientation$.next(value);\n    this._orientation = value;\n  }\n\n  public get currentIndex(): number {\n    if (this.listKeyManager) {\n      return this.listKeyManager.activeItemIndex;\n    }\n\n    return 0;\n  }\n  public get currentSlide(): MatCarouselSlideComponent {\n    if (this.listKeyManager) {\n      return this.listKeyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  @ContentChildren(MatCarouselSlideComponent) public slidesList: QueryList<\n    MatCarouselSlideComponent\n  >;\n  @ViewChild('carouselContainer') private carouselContainer: ElementRef<\n    HTMLDivElement\n  >;\n  @ViewChild('carouselList') private carouselList: ElementRef<HTMLElement>;\n  public listKeyManager: ListKeyManager<MatCarouselSlideComponent>;\n\n  private _autoplay = true;\n  private autoplay$ = new Subject<boolean>();\n\n  private interval$ = new BehaviorSubject<number>(5000);\n  private slides$ = new BehaviorSubject<number>(null);\n\n  private _maxWidth = 'auto';\n  private maxWidth$ = new Subject<never>();\n\n  private _loop = true;\n  private loop$ = new Subject<boolean>();\n\n  private _orientation: Orientation = 'ltr';\n  private orientation$ = new Subject<Orientation>();\n\n  private timer$: Observable<number>;\n  private timerStop$ = new Subject<never>();\n\n  private destroy$ = new Subject<never>();\n  private playing = false;\n\n  constructor(\n    private animationBuilder: AnimationBuilder,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platformId\n  ) {}\n\n  public ngAfterContentInit(): void {\n    this.listKeyManager = new ListKeyManager(this.slidesList)\n      .withVerticalOrientation(false)\n      .withHorizontalOrientation(this._orientation)\n      .withWrap(this._loop);\n\n    this.listKeyManager.updateActiveItem(0);\n    this.listKeyManager.change\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.playAnimation());\n  }\n\n  public ngAfterViewInit(): void {\n    this.autoplay$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n      this.stopTimer();\n      this.startTimer(value);\n    });\n\n    this.interval$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n      this.stopTimer();\n      this.resetTimer(value);\n      this.startTimer(this._autoplay);\n    });\n\n    this.maxWidth$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.slideTo(0));\n\n    this.loop$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(value => this.listKeyManager.withWrap(value));\n\n    this.orientation$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(value => this.listKeyManager.withHorizontalOrientation(value));\n\n    this.slides$\n      .pipe(\n        takeUntil(this.destroy$),\n        filter(value => value && value < this.slidesList.length)\n      )\n      .subscribe(value => this.resetSlides(value));\n  }\n\n  public ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  public next(): void {\n    this.goto(Direction.Right);\n  }\n\n  public previous(): void {\n    this.goto(Direction.Left);\n  }\n\n  public slideTo(index: number): void {\n    this.goto(Direction.Index, index);\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent): void {\n    if (this.useKeyboard && !this.playing) {\n      this.listKeyManager.onKeydown(event);\n    }\n  }\n\n  @HostListener('mouseenter')\n  public onMouseEnter(): void {\n    this.stopTimer();\n  }\n\n  @HostListener('mouseleave')\n  public onMouseLeave(): void {\n    this.startTimer(this._autoplay);\n  }\n\n  @HostListener('mousewheel', ['$event'])\n  public onMouseWheel(event: MouseWheelEvent): void {\n    if (this.useMouseWheel) {\n      event.preventDefault(); // prevent window to scroll\n      const Î = Math.sign(event.wheelDelta);\n\n      if (Î < 0) {\n        this.next();\n      } else if (Î > 0) {\n        this.previous();\n      }\n    }\n  }\n\n  @HostListener('window:resize', ['$event'])\n  public onResize(event: Event): void {\n    // Reset carousel when window is resized\n    // in order to avoid major glitches.\n    this.slideTo(0);\n  }\n\n  public onPan(event: any, slideElem: HTMLElement): void {\n    let Îx = event.deltaX;\n    if (this.isOutOfBounds()) {\n      Îx *= 0.2; // decelerate movement;\n    }\n\n    this.renderer.setStyle(slideElem, 'cursor', 'grabbing');\n    this.renderer.setStyle(\n      this.carouselList.nativeElement,\n      'transform',\n      this.getTranslation(this.getOffset() + Îx)\n    );\n  }\n\n  public onPanEnd(event: any, slideElem: HTMLElement): void {\n    this.renderer.removeStyle(slideElem, 'cursor');\n\n    if (\n      !this.isOutOfBounds() &&\n      Math.abs(event.deltaX) > this.getWidth() * 0.25\n    ) {\n      if (event.deltaX <= 0) {\n        this.next();\n        return;\n      }\n      this.previous();\n      return;\n    }\n    this.playAnimation(); // slide back, don't change current index\n  }\n\n  private isOutOfBounds(): boolean {\n    const sign = this.orientation === 'rtl' ? -1 : 1;\n    const left =\n      sign *\n      (this.carouselList.nativeElement.getBoundingClientRect().left -\n        this.carouselList.nativeElement.offsetParent.getBoundingClientRect()\n          .left);\n    const lastIndex = this.slidesList.length - 1;\n    const width = -this.getWidth() * lastIndex;\n\n    return (\n      (this.listKeyManager.activeItemIndex === 0 && left >= 0) ||\n      (this.listKeyManager.activeItemIndex === lastIndex && left <= width)\n    );\n  }\n\n  private isVisible(): boolean {\n    if (!isPlatformBrowser(this.platformId)) {\n      return false;\n    }\n\n    const elem = this.carouselContainer.nativeElement;\n    const docViewTop = window.pageYOffset;\n    const docViewBottom = docViewTop + window.innerHeight;\n    const elemOffset = elem.getBoundingClientRect();\n    const elemTop = docViewTop + elemOffset.top;\n    const elemBottom = elemTop + elemOffset.height;\n\n    return elemBottom <= docViewBottom && elemTop >= docViewTop;\n  }\n\n  private getOffset(): number {\n    const offset = this.listKeyManager.activeItemIndex * this.getWidth();\n    const sign = this.orientation === 'rtl' ? 1 : -1;\n    return sign * offset;\n  }\n\n  private getTranslation(offset: number): string {\n    return `translateX(${offset}px)`;\n  }\n\n  private getWidth(): number {\n    return this.carouselContainer.nativeElement.clientWidth;\n  }\n\n  private goto(direction: Direction, index?: number): void {\n    if (!this.playing) {\n      const rtl = this.orientation === 'rtl';\n\n      switch (direction) {\n        case Direction.Left:\n          return rtl\n            ? this.listKeyManager.setNextItemActive()\n            : this.listKeyManager.setPreviousItemActive();\n        case Direction.Right:\n          return rtl\n            ? this.listKeyManager.setPreviousItemActive()\n            : this.listKeyManager.setNextItemActive();\n        case Direction.Index:\n          return this.listKeyManager.setActiveItem(index);\n      }\n    }\n  }\n\n  private playAnimation(): void {\n    const translation = this.getTranslation(this.getOffset());\n    const factory = this.animationBuilder.build(\n      animate(this.timings, style({ transform: translation }))\n    );\n    const animation = factory.create(this.carouselList.nativeElement);\n\n    animation.onStart(() => (this.playing = true));\n    animation.onDone(() => {\n      this.playing = false;\n      this.renderer.setStyle(\n        this.carouselList.nativeElement,\n        'transform',\n        translation\n      );\n      animation.destroy();\n    });\n    animation.play();\n  }\n\n  private resetSlides(slides: number): void {\n    this.slidesList.reset(this.slidesList.toArray().slice(0, slides));\n  }\n\n  private resetTimer(value: number): void {\n    this.timer$ = interval(value);\n  }\n\n  private startTimer(autoplay: boolean): void {\n    if (!autoplay) {\n      return;\n    }\n\n    this.timer$\n      .pipe(\n        takeUntil(this.timerStop$),\n        takeUntil(this.destroy$),\n        filter(() => this.isVisible())\n      )\n      .subscribe(() => {\n        this.listKeyManager.withWrap(true).setNextItemActive();\n        this.listKeyManager.withWrap(this.loop);\n      });\n  }\n\n  private stopTimer(): void {\n    this.timerStop$.next();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { MatCarouselComponent } from './carousel.component';\nimport { MatCarouselSlideComponent } from './carousel-slide/carousel-slide.component';\n\n@NgModule({\n  declarations: [MatCarouselComponent, MatCarouselSlideComponent],\n  imports: [CommonModule, MatButtonModule, MatIconModule],\n  exports: [MatCarouselComponent, MatCarouselSlideComponent]\n})\nexport class MatCarouselModule {}\n"]}