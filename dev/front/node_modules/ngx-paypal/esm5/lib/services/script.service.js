/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
var ScriptService = /** @class */ (function () {
    function ScriptService(zone) {
        this.zone = zone;
    }
    /**
     * @param {?} url
     * @param {?} globalVar
     * @param {?} onReady
     * @return {?}
     */
    ScriptService.prototype.registerScript = /**
     * @param {?} url
     * @param {?} globalVar
     * @param {?} onReady
     * @return {?}
     */
    function (url, globalVar, onReady) {
        var _this = this;
        if (((/** @type {?} */ (window)))[globalVar]) {
            // global variable is present = script was already loaded
            this.zone.run((/**
             * @return {?}
             */
            function () {
                onReady(((/** @type {?} */ (window)))[globalVar]);
            }));
            return;
        }
        // prepare script elem
        /** @type {?} */
        var scriptElem = document.createElement('script');
        scriptElem.id = this.getElemId(globalVar);
        scriptElem.innerHTML = '';
        scriptElem.onload = (/**
         * @return {?}
         */
        function () {
            _this.zone.run((/**
             * @return {?}
             */
            function () {
                onReady(((/** @type {?} */ (window)))[globalVar]);
            }));
        });
        scriptElem.src = url;
        scriptElem.async = true;
        scriptElem.defer = true;
        // add script to header
        document.getElementsByTagName('head')[0].appendChild(scriptElem);
    };
    /**
     * @param {?} url
     * @param {?} globalVar
     * @return {?}
     */
    ScriptService.prototype.cleanup = /**
     * @param {?} url
     * @param {?} globalVar
     * @return {?}
     */
    function (url, globalVar) {
        ((/** @type {?} */ (window)))[globalVar] = undefined;
        ((/** @type {?} */ (window)))[url] = undefined;
        // remove script from DOM
        /** @type {?} */
        var elem = document.getElementById(this.getElemId(globalVar));
        if (elem) {
            document.removeChild(elem);
        }
    };
    /**
     * @private
     * @param {?} globalVar
     * @return {?}
     */
    ScriptService.prototype.getElemId = /**
     * @private
     * @param {?} globalVar
     * @return {?}
     */
    function (globalVar) {
        return "ngx-paypal-script-elem-" + globalVar;
    };
    ScriptService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ScriptService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    return ScriptService;
}());
export { ScriptService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ScriptService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGF5cGFsLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NjcmlwdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRDtJQUdJLHVCQUNjLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBRTFCLENBQUM7Ozs7Ozs7SUFFRCxzQ0FBYzs7Ozs7O0lBQWQsVUFBZSxHQUFXLEVBQUUsU0FBaUIsRUFBRSxPQUFpQztRQUFoRixpQkF3QkM7UUF2QkcsSUFBSSxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDNUIseURBQXlEO1lBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O1lBQUM7Z0JBQ1YsT0FBTyxDQUFDLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTztTQUNWOzs7WUFHSyxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDbkQsVUFBVSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQzFCLFVBQVUsQ0FBQyxNQUFNOzs7UUFBRztZQUNoQixLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztZQUFDO2dCQUNWLE9BQU8sQ0FBQyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QyxDQUFDLEVBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQSxDQUFDO1FBQ0YsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDckIsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDeEIsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFeEIsdUJBQXVCO1FBQ3ZCLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7O0lBRUQsK0JBQU87Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsU0FBaUI7UUFDbEMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUN2QyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDOzs7WUFHM0IsSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUvRCxJQUFJLElBQUksRUFBRTtZQUNOLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7SUFDTCxDQUFDOzs7Ozs7SUFFTyxpQ0FBUzs7Ozs7SUFBakIsVUFBa0IsU0FBaUI7UUFDL0IsT0FBTyw0QkFBMEIsU0FBVyxDQUFDO0lBQ2pELENBQUM7O2dCQWhESixVQUFVOzs7O2dCQUZVLE1BQU07O0lBbUQzQixvQkFBQztDQUFBLEFBakRELElBaURDO1NBaERZLGFBQWE7Ozs7OztJQUdsQiw2QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNjcmlwdFNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmUsXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3RlclNjcmlwdCh1cmw6IHN0cmluZywgZ2xvYmFsVmFyOiBzdHJpbmcsIG9uUmVhZHk6IChnbG9iYWxWYXI6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICgod2luZG93IGFzIGFueSlbZ2xvYmFsVmFyXSkge1xyXG4gICAgICAgICAgICAvLyBnbG9iYWwgdmFyaWFibGUgaXMgcHJlc2VudCA9IHNjcmlwdCB3YXMgYWxyZWFkeSBsb2FkZWRcclxuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvblJlYWR5KCh3aW5kb3cgYXMgYW55KVtnbG9iYWxWYXJdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByZXBhcmUgc2NyaXB0IGVsZW1cclxuICAgICAgICBjb25zdCBzY3JpcHRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgc2NyaXB0RWxlbS5pZCA9IHRoaXMuZ2V0RWxlbUlkKGdsb2JhbFZhcik7XHJcbiAgICAgICAgc2NyaXB0RWxlbS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBzY3JpcHRFbGVtLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvblJlYWR5KCh3aW5kb3cgYXMgYW55KVtnbG9iYWxWYXJdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzY3JpcHRFbGVtLnNyYyA9IHVybDtcclxuICAgICAgICBzY3JpcHRFbGVtLmFzeW5jID0gdHJ1ZTtcclxuICAgICAgICBzY3JpcHRFbGVtLmRlZmVyID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHNjcmlwdCB0byBoZWFkZXJcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdEVsZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFudXAodXJsOiBzdHJpbmcsIGdsb2JhbFZhcjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpW2dsb2JhbFZhcl0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpW3VybF0gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBzY3JpcHQgZnJvbSBET01cclxuICAgICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5nZXRFbGVtSWQoZ2xvYmFsVmFyKSk7XHJcblxyXG4gICAgICAgIGlmIChlbGVtKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUNoaWxkKGVsZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEVsZW1JZChnbG9iYWxWYXI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGBuZ3gtcGF5cGFsLXNjcmlwdC1lbGVtLSR7Z2xvYmFsVmFyfWA7XHJcbiAgICB9XHJcbn1cclxuIl19