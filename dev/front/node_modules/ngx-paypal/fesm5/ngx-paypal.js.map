{"version":3,"file":"ngx-paypal.js.map","sources":["ng://ngx-paypal/lib/services/script.service.ts","ng://ngx-paypal/lib/services/paypal-script.service.ts","ng://ngx-paypal/lib/components/paypal.component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\r\n        if ((window as any)[globalVar]) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(url: string, globalVar: string): void {\r\n        (window as any)[globalVar] = undefined;\r\n        (window as any)[url] = undefined;\r\n\r\n        // remove script from DOM\r\n        const elem = document.getElementById(this.getElemId(globalVar));\r\n\r\n        if (elem) {\r\n            document.removeChild(elem);\r\n        }\r\n    }\r\n\r\n    private getElemId(globalVar: string): string {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class PayPalScriptService {\r\n\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n    ) {\r\n    }\r\n\r\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n\r\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\r\n        const params: IQueryParam[] = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n\r\n    private getQueryString(queryParams: IQueryParam[]): string {\r\n        let queryString = '';\r\n\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            } else {\r\n                queryString += '&';\r\n            }\r\n\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n\r\n        return queryString;\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n    ICancelCallbackData,\r\n    IClientAuthorizeCallbackData,\r\n    ICreateOrderCallbackActions,\r\n    IOnApproveCallbackActions,\r\n    IOnApproveCallbackData,\r\n    IOnShippingChangeActions,\r\n    IOnShippingChangeData,\r\n    IPayPalConfig,\r\n} from '../models/paypal-models';\r\nimport { PayPalScriptService } from '../services/paypal-script.service';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config?: IPayPalConfig;\r\n\r\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\r\n    @Input() registerScript: boolean = true;\r\n\r\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\r\n    @Output() scriptLoaded = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    private payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainer') set payPalButtonContainer(content: ElementRef) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n\r\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\r\n    private initializePayPal: boolean = true;\r\n\r\n    /**\r\n     * Reference to PayPal global API\r\n     */\r\n    private payPal: any;\r\n\r\n    constructor(\r\n        private paypalScriptService: PayPalScriptService,\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n\r\n        // init when config once its available\r\n        const config = this.config;\r\n        if (config && this.registerScript) {\r\n            this.initPayPalScript(config, (payPal) => {\r\n                // store reference to paypal global script\r\n                this.payPal = payPal;\r\n                this.doPayPalCheck();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    customInit(payPal: any): void {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    private doPayPalCheck(): void {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n\r\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n\r\n    private generateElementId(): string {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n\r\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\r\n        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n        paypal.Buttons({\r\n            style: config.style,\r\n            createOrder: (data: any, actions: ICreateOrderCallbackActions) => {\r\n                if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                    throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                        Please choose one or the other.`);\r\n                }\r\n\r\n                if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                    throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                        Please define one of these to create order.`);\r\n                }\r\n\r\n                if (config.createOrderOnClient) {\r\n                    return actions.order.create(config.createOrderOnClient(data));\r\n                }\r\n\r\n                if (config.createOrderOnServer) {\r\n                    return config.createOrderOnServer(data);\r\n                }\r\n\r\n                throw Error(`Invalid state for 'createOrder'.`);\r\n            },\r\n\r\n            onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\r\n                if (config.onApprove) {\r\n                    config.onApprove(data, actions);\r\n                }\r\n\r\n                // capture on server\r\n                if (config.authorizeOnServer) {\r\n                    return config.authorizeOnServer(data, actions);\r\n                }\r\n\r\n                // capture on client\r\n                const onClientAuthorization = config.onClientAuthorization;\r\n                if (onClientAuthorization) {\r\n                    actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\r\n                        onClientAuthorization(details);\r\n                    });\r\n                    return;\r\n                }\r\n            },\r\n\r\n            onError: (error: any) => {\r\n                if (config.onError) {\r\n                    config.onError(error);\r\n                }\r\n            },\r\n\r\n            onCancel: (data: ICancelCallbackData, actions: any) => {\r\n                if (config.onCancel) {\r\n                    config.onCancel(data, actions);\r\n                }\r\n            },\r\n            onShippingChange: (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\r\n                if (config.onShippingChange) {\r\n                    return config.onShippingChange(data, actions);\r\n                }\r\n            },\r\n            onClick: () => {\r\n                if (config.onClick) {\r\n                    config.onClick();\r\n                }\r\n            },\r\n        }).render(`#${this.payPalButtonContainerId}`);\r\n    }\r\n}\r\n\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal.component';\r\nimport { ScriptService } from './services/script.service';\r\nimport { PayPalScriptService } from './services/paypal-script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    PayPalScriptService\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}
