/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from '@angular/core';
import { MatVideoComponent } from '../video.component';
var MatVideoSourceDirective = /** @class */ (function () {
    function MatVideoSourceDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.type = null;
        this.init = true;
        this.video = matVideoComponent;
        this.source = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MatVideoSourceDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.source.src = this.src;
        this.source.type = this.type;
        if (!this.init)
            this.video.load();
    };
    MatVideoSourceDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[matVideoSource]'
                },] }
    ];
    /** @nocollapse */
    MatVideoSourceDirective.ctorParameters = function () { return [
        { type: MatVideoComponent, decorators: [{ type: Host }] },
        { type: ElementRef }
    ]; };
    MatVideoSourceDirective.propDecorators = {
        src: [{ type: Input }],
        type: [{ type: Input }]
    };
    return MatVideoSourceDirective;
}());
export { MatVideoSourceDirective };
if (false) {
    /** @type {?} */
    MatVideoSourceDirective.prototype.src;
    /** @type {?} */
    MatVideoSourceDirective.prototype.type;
    /** @type {?} */
    MatVideoSourceDirective.prototype.init;
    /** @type {?} */
    MatVideoSourceDirective.prototype.video;
    /** @type {?} */
    MatVideoSourceDirective.prototype.source;
    /** @type {?} */
    MatVideoSourceDirective.prototype.matVideoComponent;
    /** @type {?} */
    MatVideoSourceDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXNvdXJjZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXQtdmlkZW8vIiwic291cmNlcyI6WyJhcHAvdmlkZW8vZGlyZWN0aXZlcy9tYXQtdmlkZW8tc291cmNlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFFN0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdkQ7SUFXRSxpQ0FDa0IsaUJBQW9DLEVBQzVDLEVBQWM7UUFETixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQzVDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFUZixRQUFHLEdBQVcsSUFBSSxDQUFDO1FBQ25CLFNBQUksR0FBVyxJQUFJLENBQUM7UUFFckIsU0FBSSxHQUFHLElBQUksQ0FBQztRQVFsQixJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7OztJQUVELDZDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDOztnQkExQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCOzs7O2dCQUpRLGlCQUFpQix1QkFjckIsSUFBSTtnQkFoQlcsVUFBVTs7O3NCQVEzQixLQUFLO3VCQUNMLEtBQUs7O0lBdUJSLDhCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0F6QlksdUJBQXVCOzs7SUFDbEMsc0NBQTRCOztJQUM1Qix1Q0FBNkI7O0lBRTdCLHVDQUFvQjs7SUFDcEIsd0NBQWlDOztJQUNqQyx5Q0FBa0M7O0lBR2hDLG9EQUFvRDs7SUFDcEQscUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE1hdFZpZGVvQ29tcG9uZW50IH0gZnJvbSAnLi4vdmlkZW8uY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21hdFZpZGVvU291cmNlXSdcbn0pXG5leHBvcnQgY2xhc3MgTWF0VmlkZW9Tb3VyY2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBzcmM6IHN0cmluZyA9IG51bGw7XG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZyA9IG51bGw7XG5cbiAgcHJpdmF0ZSBpbml0ID0gdHJ1ZTtcbiAgcHJpdmF0ZSB2aWRlbzogTWF0VmlkZW9Db21wb25lbnQ7XG4gIHByaXZhdGUgc291cmNlOiBIVE1MU291cmNlRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASG9zdCgpIHByaXZhdGUgbWF0VmlkZW9Db21wb25lbnQ6IE1hdFZpZGVvQ29tcG9uZW50LFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7XG4gICAgdGhpcy52aWRlbyA9IG1hdFZpZGVvQ29tcG9uZW50O1xuICAgIHRoaXMuc291cmNlID0gZWwubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLmluaXQgPSBmYWxzZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICB0aGlzLnNvdXJjZS5zcmMgPSB0aGlzLnNyYztcbiAgICB0aGlzLnNvdXJjZS50eXBlID0gdGhpcy50eXBlO1xuXG4gICAgaWYgKCF0aGlzLmluaXQpXG4gICAgICB0aGlzLnZpZGVvLmxvYWQoKTtcbiAgfVxuXG59XG4iXX0=