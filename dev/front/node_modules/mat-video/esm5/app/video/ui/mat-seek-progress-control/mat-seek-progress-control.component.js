/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { EventService } from '../../services/event.service';
var MatSeekProgressControlComponent = /** @class */ (function () {
    function MatSeekProgressControlComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.curTimePercent = 0;
        this.bufTimePercent = 0;
        this.video = null;
        this.color = 'primary';
        this.currentTime = 0;
        this.currentTimeChanged = new EventEmitter();
        this.bufferedTime = 0;
        this.bufferedTimeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'seeking', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'canplaythrough', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null },
            { element: this.video, name: 'timeupdate', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'progress', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.evt.removeEvents(this.events);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.seekVideo = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var percentage = value / 100;
        /** @type {?} */
        var newTime = this.video.duration * percentage;
        this.video.currentTime = newTime;
    };
    /**
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateCurrentTime = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.currentTime = time;
        this.curTimePercent = this.updateTime(this.currentTimeChanged, this.currentTime);
    };
    /**
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateBufferedTime = /**
     * @return {?}
     */
    function () {
        if (this.video.buffered.length > 0) {
            /** @type {?} */
            var largestBufferValue = 0;
            for (var i = 0; i < this.video.buffered.length; i++) {
                /** @type {?} */
                var cur = this.video.currentTime;
                /** @type {?} */
                var start = this.video.buffered.start(i);
                /** @type {?} */
                var end = this.video.buffered.end(i);
                if (start <= cur && end > cur && (end - start) > largestBufferValue)
                    largestBufferValue = end;
            }
            this.bufferedTime = largestBufferValue;
            this.bufTimePercent = this.updateTime(this.bufferedTimeChanged, this.bufferedTime);
        }
    };
    /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    MatSeekProgressControlComponent.prototype.updateTime = /**
     * @param {?} emitter
     * @param {?} time
     * @return {?}
     */
    function (emitter, time) {
        emitter.emit(time);
        return time / this.video.duration * 100;
    };
    MatSeekProgressControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-seek-progress-control',
                    template: "<mat-slider-progress-bar [color]=\"color\" mode=\"buffer\" step=\"0.01\" [value]=\"curTimePercent\" [bufferValue]=\"bufTimePercent\"\n  (input)=\"seekVideo($event.value)\"></mat-slider-progress-bar>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatSeekProgressControlComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: EventService }
    ]; };
    MatSeekProgressControlComponent.propDecorators = {
        video: [{ type: Input }],
        color: [{ type: Input }],
        currentTime: [{ type: Input }],
        currentTimeChanged: [{ type: Output }],
        bufferedTime: [{ type: Input }],
        bufferedTimeChanged: [{ type: Output }]
    };
    return MatSeekProgressControlComponent;
}());
export { MatSeekProgressControlComponent };
if (false) {
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.curTimePercent;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufTimePercent;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.video;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.color;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.currentTime;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.currentTimeChanged;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufferedTime;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.bufferedTimeChanged;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.events;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.renderer;
    /** @type {?} */
    MatSeekProgressControlComponent.prototype.evt;
}
//# sourceMappingURL=data:application/json;base64,