/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host, Input } from '@angular/core';
import { MatVideoComponent } from '../video.component';
export class MatVideoTrackDirective {
    /**
     * @param {?} matVideoComponent
     * @param {?} el
     */
    constructor(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.kind = null;
        this.srclang = null;
        this.label = null;
        this.init = true;
        this.video = matVideoComponent;
        this.track = el.nativeElement;
        this.init = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.track.src = this.src;
        this.track.kind = this.kind;
        this.track.srclang = this.srclang;
        this.track.label = this.label;
        if (!this.init)
            this.video.load();
    }
}
MatVideoTrackDirective.decorators = [
    { type: Directive, args: [{
                selector: '[matVideoTrack]'
            },] }
];
/** @nocollapse */
MatVideoTrackDirective.ctorParameters = () => [
    { type: MatVideoComponent, decorators: [{ type: Host }] },
    { type: ElementRef }
];
MatVideoTrackDirective.propDecorators = {
    src: [{ type: Input }],
    kind: [{ type: Input }],
    srclang: [{ type: Input }],
    label: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MatVideoTrackDirective.prototype.src;
    /** @type {?} */
    MatVideoTrackDirective.prototype.kind;
    /** @type {?} */
    MatVideoTrackDirective.prototype.srclang;
    /** @type {?} */
    MatVideoTrackDirective.prototype.label;
    /** @type {?} */
    MatVideoTrackDirective.prototype.init;
    /** @type {?} */
    MatVideoTrackDirective.prototype.video;
    /** @type {?} */
    MatVideoTrackDirective.prototype.track;
    /** @type {?} */
    MatVideoTrackDirective.prototype.matVideoComponent;
    /** @type {?} */
    MatVideoTrackDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXZpZGVvLXRyYWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC12aWRlby8iLCJzb3VyY2VzIjpbImFwcC92aWRlby9kaXJlY3RpdmVzL21hdC12aWRlby10cmFjay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBS3ZELE1BQU0sT0FBTyxzQkFBc0I7Ozs7O0lBVS9CLFlBQ29CLGlCQUFvQyxFQUM1QyxFQUFjO1FBRE4sc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUM1QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBWGpCLFFBQUcsR0FBVyxJQUFJLENBQUM7UUFDbkIsU0FBSSxHQUFXLElBQUksQ0FBQztRQUNwQixZQUFPLEdBQVcsSUFBSSxDQUFDO1FBQ3ZCLFVBQUssR0FBVyxJQUFJLENBQUM7UUFFdEIsU0FBSSxHQUFHLElBQUksQ0FBQztRQVFoQixJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBOUJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2FBQzlCOzs7O1lBSlEsaUJBQWlCLHVCQWdCakIsSUFBSTtZQWxCTyxVQUFVOzs7a0JBUXpCLEtBQUs7bUJBQ0wsS0FBSztzQkFDTCxLQUFLO29CQUNMLEtBQUs7Ozs7SUFITixxQ0FBNEI7O0lBQzVCLHNDQUE2Qjs7SUFDN0IseUNBQWdDOztJQUNoQyx1Q0FBOEI7O0lBRTlCLHNDQUFvQjs7SUFDcEIsdUNBQWlDOztJQUNqQyx1Q0FBZ0M7O0lBRzVCLG1EQUFvRDs7SUFDcEQsb0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBNYXRWaWRlb0NvbXBvbmVudCB9IGZyb20gJy4uL3ZpZGVvLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW21hdFZpZGVvVHJhY2tdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTWF0VmlkZW9UcmFja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgICBASW5wdXQoKSBzcmM6IHN0cmluZyA9IG51bGw7XHJcbiAgICBASW5wdXQoKSBraW5kOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgQElucHV0KCkgc3JjbGFuZzogc3RyaW5nID0gbnVsbDtcclxuICAgIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgaW5pdCA9IHRydWU7XHJcbiAgICBwcml2YXRlIHZpZGVvOiBNYXRWaWRlb0NvbXBvbmVudDtcclxuICAgIHByaXZhdGUgdHJhY2s6IEhUTUxUcmFja0VsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEhvc3QoKSBwcml2YXRlIG1hdFZpZGVvQ29tcG9uZW50OiBNYXRWaWRlb0NvbXBvbmVudCxcclxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnZpZGVvID0gbWF0VmlkZW9Db21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy50cmFjayA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5pbml0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudHJhY2suc3JjID0gdGhpcy5zcmM7XHJcbiAgICAgICAgdGhpcy50cmFjay5raW5kID0gdGhpcy5raW5kO1xyXG4gICAgICAgIHRoaXMudHJhY2suc3JjbGFuZyA9IHRoaXMuc3JjbGFuZztcclxuICAgICAgICB0aGlzLnRyYWNrLmxhYmVsID0gdGhpcy5sYWJlbDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmluaXQpXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW8ubG9hZCgpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=